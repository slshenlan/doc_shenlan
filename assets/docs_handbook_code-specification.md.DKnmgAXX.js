import{_ as e,c as l,o as d,ae as a}from"./chunks/framework.Bu3pZnTe.js";const y=JSON.parse('{"title":"编码指南","description":"","frontmatter":{},"headers":[],"relativePath":"docs/handbook/code-specification.md","filePath":"docs/handbook/code-specification.md","lastUpdated":1739171098000}'),s={name:"docs/handbook/code-specification.md"};function o(i,t,n,c,r,f){return d(),l("div",null,t[0]||(t[0]=[a('<h1 id="编码指南" tabindex="-1">编码指南 <a class="header-anchor" href="#编码指南" aria-label="Permalink to &quot;编码指南&quot;">​</a></h1><h2 id="命名规则" tabindex="-1">命名规则 <a class="header-anchor" href="#命名规则" aria-label="Permalink to &quot;命名规则&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">规则</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">项目</td><td style="text-align:left;">全部采用小写方式<br> 以下划线分隔</td><td style="text-align:left;"><code>my_project_name</code></td></tr><tr><td style="text-align:left;">目录</td><td style="text-align:left;">全部采用小写方式，以中划线分割<br> 有复数结构时，要采用复数命名法</td><td style="text-align:left;"><code>scripts</code>,<br> <code>styles</code>,<br> <code>images</code>,<br> <code>data-models</code></td></tr><tr><td style="text-align:left;">JS</td><td style="text-align:left;">参照目录命名规则</td><td style="text-align:left;"><code>a-b.js</code></td></tr><tr><td style="text-align:left;">css, less</td><td style="text-align:left;">参照目录命名规则</td><td style="text-align:left;"><code>a-b.less</code></td></tr><tr><td style="text-align:left;">html</td><td style="text-align:left;">参照目录命名规则</td><td style="text-align:left;"><code>a-b.html</code></td></tr><tr><td style="text-align:left;">路由</td><td style="text-align:left;">path：kebab-case<br> name：camelCase</td><td style="text-align:left;"><code>my-page</code></td></tr><tr><td style="text-align:left;">components</td><td style="text-align:left;">参照目录命名规则</td><td style="text-align:left;"><code>sl-demo</code></td></tr><tr><td style="text-align:left;">函数</td><td style="text-align:left;">驼峰命名</td><td style="text-align:left;"><code>stringFormat</code></td></tr><tr><td style="text-align:left;">变量</td><td style="text-align:left;">驼峰命名</td><td style="text-align:left;"><code>firstName</code></td></tr><tr><td style="text-align:left;">常量</td><td style="text-align:left;">全部字母大写，单词间下划线分隔</td><td style="text-align:left;"><code>HTML_ENTITY </code></td></tr><tr><td style="text-align:left;">类</td><td style="text-align:left;">Pascal 命名法</td><td style="text-align:left;"><code>TextNode</code></td></tr><tr><td style="text-align:left;">枚举</td><td style="text-align:left;">Pascal 命名法 , 枚举的属性 使用 全部字母大写，单词间下划线分隔</td><td style="text-align:left;">let <code>TargetState</code> ={READING:1};</td></tr><tr><td style="text-align:left;">Boolean</td><td style="text-align:left;">is 或 has 开头</td><td style="text-align:left;">let <code>isReady</code> = false; <br> let <code>hasMoreCommands</code> = false;</td></tr></tbody></table>',3)]))}const g=e(s,[["render",o]]);export{y as __pageData,g as default};
